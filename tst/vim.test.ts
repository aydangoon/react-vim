import { MotionType } from '../src/motion'
import { Mode } from '../src/command'
import Vim from '../src/vim'
import exp from 'constants'

const make_vim = (t) => new Vim(t)
describe('Vim motion commands', () => {
    const make_motion_cmd = (t: string, count?: number) => ({ type: <MotionType>t, count })
    const right = make_motion_cmd('l')
    const left = make_motion_cmd('h')
    const up = make_motion_cmd('k')
    const down = make_motion_cmd('j')
    test('normal mode left-right', () => {
        const v = make_vim('hello world')
        v.execute_command(right)
        expect(v.cursor).toEqual(1)
        v.execute_command(left)
        expect(v.cursor).toEqual(0)
        v.execute_command(left)
        expect(v.cursor).toEqual(0)
        v.execute_command(up)
        expect(v.cursor).toEqual(0)
        v.execute_command(down)
        expect(v.cursor).toEqual(0)
    })
    test('normal mode up-down', () => {
        const v = make_vim('hello\nworld')
        v.execute_command(down)
        expect(v.cursor).toEqual(6)
        v.execute_command(up)
        expect(v.cursor).toEqual(0)
        v.execute_command(right)
        v.execute_command(down)
        expect(v.cursor).toEqual(7)
    })
    test('normal mode blank line', () => {
        const v = make_vim('ab\n\ncd')
        v.execute_command(right)
        v.execute_command(down)
        expect(v.cursor).toEqual(3)
        v.execute_command(down)
        expect(v.cursor).toEqual(5)
    })
    test('normal mode motions with count', () => {
        const v = make_vim('ab\n\ncd')
        v.execute_command(make_motion_cmd('l', 5))
        expect(v.cursor).toEqual(1)
        v.execute_command(make_motion_cmd('j', 2))
        expect(v.cursor).toEqual(5)
    })
})

describe('Vim mode commands', () => {
    test('all transitions', () => {
        const v = make_vim('hello world')
        expect(v.mode).toEqual(Mode.Normal)
        v.execute_command({ type: 'i' })
        expect(v.mode).toEqual(Mode.Insert)
        v.reset()
        expect(v.mode).toEqual(Mode.Normal)
        v.execute_command({ type: 'v' })
        expect(v.mode).toEqual(Mode.Visual)
        v.execute_command({ type: 'v' })
        expect(v.mode).toEqual(Mode.Normal)
        v.execute_command({ type: 'R' })
        expect(v.mode).toEqual(Mode.Replace)
    })
})

describe('Vim non-motion commands', () => {
    test('a', () => {
        const v = make_vim('a')
        v.execute_command({ type: 'a' })
        expect(v.mode).toEqual(Mode.Insert)
        expect(v.cursor).toEqual(1)
        v.reset()
        expect(v.mode).toEqual(Mode.Normal)
        expect(v.cursor).toEqual(0)
        v.execute_command({ type: 'a' })
        v.input('b')
        expect(v.text).toEqual('ab')
        expect(v.cursor).toEqual(2)
        v.input('Enter')
        expect(v.text).toEqual('ab\n')
        expect(v.cursor).toEqual(3)
    })
    test('A', () => {
        const v = make_vim('abc')
        v.execute_command({ type: 'A' })
        expect(v.mode).toEqual(Mode.Insert)
        expect(v.cursor).toEqual(3)
        v.input('d')
        expect(v.text).toEqual('abcd')
        expect(v.cursor).toEqual(4)
    })
    test('I', () => {
        const v = make_vim(' abc')
        v.execute_command({ type: 'I' })
        expect(v.mode).toEqual(Mode.Insert)
        expect(v.cursor).toEqual(1)
        v.input('d')
        expect(v.text).toEqual(' dabc')
    })
    test('o', () => {
        const v = make_vim('abc')
        v.execute_command({ type: 'o' })
        expect(v.mode).toEqual(Mode.Insert)
        expect(v.text).toEqual('abc\n')
        expect(v.cursor).toEqual(4)
        v.input('d')
        expect(v.text).toEqual('abc\nd')
        v.input('Escape')
        expect(v.cursor).toEqual(4)
        v.execute_command({ type: 'k' })
        expect(v.cursor).toEqual(0)
        v.execute_command({ type: 'o' })
        expect(v.text).toEqual('abc\n\nd')
        expect(v.cursor).toEqual(4)
        v.input('e')
        expect(v.text).toEqual('abc\ne\nd')
    })
    test('O', () => {
        const v = make_vim('abc')
        v.execute_command({ type: 'O' })
        expect(v.mode).toEqual(Mode.Insert)
        expect(v.text).toEqual('\nabc')
        expect(v.cursor).toEqual(0)
        v.input('d')
        expect(v.text).toEqual('d\nabc')
        v.input('Escape')
        expect(v.cursor).toEqual(0)
        v.execute_command({ type: 'j' })
        expect(v.cursor).toEqual(2)
        v.execute_command({ type: 'O' })
        expect(v.text).toEqual('d\n\nabc')
        expect(v.cursor).toEqual(2)
        v.input('e')
        expect(v.text).toEqual('d\ne\nabc')
    })
    test('x', () => {
        const v = make_vim('abc')
        v.execute_command({ type: 'x' })
        expect(v.text).toEqual('bc')
        v.execute_command({ type: 'x' })
        expect(v.text).toEqual('c')
        v.execute_command({ type: 'x' })
        expect(v.text).toEqual('')
        v.execute_command({ type: 'x' })
        expect(v.text).toEqual('')
        v.execute_command({ type: 'i' })
        v.input('a')
        expect(v.text).toEqual('a')
        expect(v.cursor).toEqual(1)
        v.input('Escape')
        expect(v.cursor).toEqual(0)
    })
    test('X', () => {
        const v = make_vim('abc')
        v.execute_command({ type: 'X' })
        expect(v.text).toEqual('abc')
        expect(v.cursor).toEqual(0)
        v.execute_command({ type: 'l' })
        v.execute_command({ type: 'X' })
        expect(v.text).toEqual('bc')
        expect(v.cursor).toEqual(0)
    })
    test('d', () => {
        let v = make_vim('abc')
        v.input('v')
        expect(v.mode).toEqual(Mode.Visual)
        expect(v.cursor).toEqual(0)
        expect(v.visual_cursor).toEqual(0)
        v.input('l')
        expect(v.cursor).toEqual(0)
        expect(v.visual_cursor).toEqual(1)
        v.input('d')
        expect(v.text).toEqual('c')
        expect(v.cursor).toEqual(0)
        v = make_vim('abc')
        v.input('e')
        expect(v.cursor).toEqual(2)
        v.input('v')
        expect(v.visual_cursor).toEqual(2)
        expect(v.cursor).toEqual(2)
        v.input('h')
        v.input('d')
        expect(v.text).toEqual('a')
        expect(v.cursor).toEqual(0)
    })
    test('dd', () => {
        const v = make_vim('abc\ndef')
        v.execute_command({ type: 'dd' })
        expect(v.text).toEqual('def')
        expect(v.cursor).toEqual(0)
        v.execute_command({ type: 'dd' })
        expect(v.text).toEqual('')
        expect(v.cursor).toEqual(0)
        v.execute_command({ type: 'dd' })
        expect(v.text).toEqual('')
        expect(v.cursor).toEqual(0)
    })
    test('D', () => {
        const v = make_vim('abc\nd')
        v.execute_command({ type: 'l' })
        v.execute_command({ type: 'D' })
        expect(v.text).toEqual('a\nd')
        expect(v.cursor).toEqual(0)
        expect(v.mode).toEqual(Mode.Normal)
        v.execute_command({ type: 'D' })
        expect(v.text).toEqual('\nd')
        expect(v.cursor).toEqual(0)
        v.execute_command({ type: 'j' })
        v.execute_command({ type: 'D' })
        expect(v.text).toEqual('\n')
        expect(v.cursor).toEqual(1)
        v.execute_command({ type: 'i' })
        v.input('a')
        expect(v.text).toEqual('\na')
    })
    test('J', () => {
        const v = make_vim('abc\ndef')
        v.execute_command({ type: 'J' })
        expect(v.text).toEqual('abc def')
        expect(v.cursor).toEqual(3)
        v.execute_command({ type: 'J' })
        expect(v.text).toEqual('abc def')
        expect(v.cursor).toEqual(3)
    })
    test('r', () => {
        const v = make_vim('abc')
        v.execute_command({ type: 'r', options: { char: 'd' } })
        expect(v.text).toEqual('dbc')
        expect(v.cursor).toEqual(0)
        expect(v.mode).toEqual(Mode.Normal)
        v.execute_command({ type: 'dd' })
        v.input('r')
        v.input('d')
        expect(v.text).toEqual('')
        expect(v.cursor).toEqual(0)
    })
})

const input_string = (v: Vim, s: string) => {
    for (const c of s) {
        v.input(c)
    }
}

describe('visual mode', () => {
    test('basic', () => {
        const v = make_vim('abc def')
        v.input('v')
        expect(v.mode).toEqual(Mode.Visual)
        expect(v.visual_cursor).toEqual(0)
        v.input('l')
        expect(v.visual_cursor).toEqual(1)
        v.input('h')
        expect(v.visual_cursor).toEqual(0)
        v.input('h')
        expect(v.visual_cursor).toEqual(0)
        v.input('v')
        expect(v.mode).toEqual(Mode.Normal)
        v.input('l')
        v.input('v')
        expect(v.mode).toEqual(Mode.Visual)
        expect(v.visual_cursor).toEqual(1)
        v.input('h')
        expect(v.visual_cursor).toEqual(0)
        expect(v.cursor).toEqual(1)
    })
})

describe('insert mode', () => {
    test('basic insert', () => {
        const v = make_vim('world')
        v.execute_command({ type: 'i' })
        v.input('h')
        expect(v.text).toEqual('hworld')
        expect(v.cursor).toEqual(1)
        v.input('Backspace')
        expect(v.text).toEqual('world')
        expect(v.cursor).toEqual(0)
        input_string(v, 'hello ')
        expect(v.text).toEqual('hello world')
        expect(v.cursor).toEqual(6)
        expect(v.mode).toEqual(Mode.Insert)
        for (let i = 0; i < 10; i++) {
            v.input('Backspace')
        }
        expect(v.text).toEqual('world')
        expect(v.cursor).toEqual(0)
    })
    test('insert extends text', () => {
        const v = make_vim('abc')
        v.execute_command({ type: 'g_' })
        v.execute_command({ type: 'i' })
        v.input('d')
        expect(v.text).toEqual('abdc')
        expect(v.cursor).toEqual(3)
        v.reset()
        expect(v.text).toEqual('abdc')
        expect(v.cursor).toEqual(3)
    })
    test('insert special characters', () => {
        const v = make_vim('a')
        v.execute_command({ type: 'i' })
        v.input('Enter')
        expect(v.text).toEqual('\na')
        expect(v.cursor).toEqual(1)
        v.input('b')
        expect(v.text).toEqual('\nba')
        expect(v.cursor).toEqual(2)
        v.input('Tab')
        expect(v.text).toEqual('\nb\ta')
    })
})
